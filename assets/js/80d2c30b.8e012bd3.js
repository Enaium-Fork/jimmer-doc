"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[625],{77765:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>x,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var a=l(74848),i=l(28453),s=l(11470),r=l(19365);const c={sidebar_position:9,title:"DSL Expressions"},t=void 0,o={id:"query/expression",title:"DSL Expressions",description:"Literal Expressions",source:"@site/docs/query/expression.mdx",sourceDirName:"query",slug:"/query/expression",permalink:"/jimmer-doc/docs/query/expression",draft:!1,unlisted:!1,editUrl:"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/query/expression.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"DSL Expressions"},sidebar:"tutorialSidebar",previous:{title:"Deep Pagination Optimization",permalink:"/jimmer-doc/docs/query/paging/deep-optimization"},next:{title:"Native SQL Expressions",permalink:"/jimmer-doc/docs/query/native-sql"}},d={},h=[{value:"Literal Expressions",id:"literal-expressions",level:2},{value:"Constant Expressions",id:"constant-expressions",level:2},{value:"Static Predicates vs Dynamic Predicates",id:"static-predicates-vs-dynamic-predicates",level:2},{value:"Comparison",id:"comparison",level:2},{value:"Fuzzy Matching",id:"fuzzy-matching",level:2},{value:"Case Sensitivity",id:"case-sensitivity",level:3},{value:"Match Modes",id:"match-modes",level:3},{value:"Null Check",id:"null-check",level:2},{value:"IN LIST",id:"in-list",level:2},{value:"Single Column",id:"single-column",level:3},{value:"Multiple Columns",id:"multiple-columns",level:3},{value:"AND, OR, NOT",id:"and-or-not",level:2},{value:"AND",id:"and",level:3},{value:"OR",id:"or",level:3},{value:"NOT",id:"not",level:3},{value:"Math Operations",id:"math-operations",level:2},{value:"Aggregate Functions",id:"aggregate-functions",level:2},{value:"Coalesce",id:"coalesce",level:2},{value:"Concat",id:"concat",level:2},{value:"Case",id:"case",level:2},{value:"Simple Case",id:"simple-case",level:3},{value:"Searched Case",id:"searched-case",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"literal-expressions",children:"Literal Expressions"}),"\n",(0,a.jsxs)(n.p,{children:["Let's first look at an example ",(0,a.jsx)(n.em,{children:"(this query has no real business logic, just for demo)"}),":"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<\n    Tuple5<\n        String,\n        Long,\n        OffsetDateTime,\n        String,\n        Boolean\n    >\n> tuples = sqlClient\n    .createQuery(book)\n    .select(\n        Expression.string().value("String"),\n        Expression.numeric().value(3L),\n        Expression.comparable().value(OffsetDateTime.now()),\n        Expression.any().value("String"),\n        Expression.nullValue(Boolean.class)\n    )\n    .execute();\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'val tuples = sqlClient\n    .createQuery(Book::class) {\n        select(\n            value("String"),\n            value(3L),\n            value(OffsetDateTime.now()),\n            value("String"),\n            nullValue(Boolean::class)\n        )\n    }\n    .execute()\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select ?, ?, ?, ?, null from BOOK as tb_1_ \n"})}),"\n",(0,a.jsx)(n.p,{children:"Except for null, literals of other types all become JDBC parameters."}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.p,{children:["As can be seen from this example, the ",(0,a.jsx)(n.code,{children:"value()"})," method accepts many parameter types."]}),(0,a.jsxs)(n.p,{children:["Note that no matter what the ",(0,a.jsx)(n.code,{children:"value()"})," parameter type is, it cannot be null, otherwise exceptions would be thrown."]}),(0,a.jsxs)(n.p,{children:["To create literal expressions for null, the ",(0,a.jsx)(n.code,{children:"nullValue()"})," method must be used which requires the expression type to be specified."]})]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"For Java code, type-guided methods are used:"}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Expression.string(), for string type."}),"\n",(0,a.jsx)(n.li,{children:"Expression.numeric(), for numeric types."}),"\n",(0,a.jsx)(n.li,{children:"Expression.comparable(), for comparable types, i.e. types extending java.lang.Comparable."}),"\n",(0,a.jsx)(n.li,{children:"Expression.any(), for other types."}),"\n"]}),(0,a.jsx)(n.p,{children:"Kotlin does not have this issue, its API is unified."})]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"In most cases, developers do not need to manually create literal expressions."}),(0,a.jsx)(n.p,{children:"Take equality check in examples below for instance, the relatively tedious syntax:"}),(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    book.name().eq(\n        Expression.string().value("Java in Action")\n    )\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    table.name eq value("Java in Action")\n)\n'})})})]}),(0,a.jsx)(n.p,{children:"Isn't this a bit tedious? Don't worry, it can be replaced with a more convenient form:"}),(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().eq("Java in Action"));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name eq "Java in Action")\n'})})})]}),(0,a.jsx)(n.p,{children:"It's easy to see other APIs provide overloaded versions to avoid making developers create literal expressions manually."}),(0,a.jsx)(n.p,{children:"But this can't cover 100% cases. In very rare cases, developers still need to create literal expressions manually."})]}),"\n",(0,a.jsx)(n.h2,{id:"constant-expressions",children:"Constant Expressions"}),"\n",(0,a.jsxs)(n.p,{children:["Constant expressions are highly similar to literal expressions, let's look at an example ",(0,a.jsx)(n.em,{children:"(this query has no real business logic, just for demo)"}),":"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<Integer> constants = sqlClient\n    .createQuery(book)\n    .select(\n        // highlight-next-line\n        Expression.constant(1)\n    )\n    .execute(); \n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"val constants = sqlClient\n    .createQuery(Book::class) {\n        select(\n            // highlight-next-line\n            constant(1)\n        )\n    }\n    .execute()\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    1\nfrom BOOK as tb_1_\n"})}),"\n",(0,a.jsx)(n.p,{children:"Unlike literal expressions that always use JDBC parameters, constant expressions directly hardcode the value into the SQL."}),"\n",(0,a.jsx)(n.p,{children:"To prevent SQL injection attacks, constant expressions only support numeric types, this is a hard constraint."}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"Although constant expressions have this hard constraint of only supporting numeric types to prevent SQL injection, they should still be strictly limited in real projects."}),(0,a.jsx)(n.p,{children:"The only reason constant expressions exist is that some databases support function-based indexes. Constant expressions can be useful if the SQL expressions defining such function indexes contain numeric constants."}),(0,a.jsx)(n.p,{children:"If your project does not have this scenario, never use constant expressions. Always use literal expressions."}),(0,a.jsx)(n.p,{children:"Incorrect use of constant expressions can have serious consequences. Erroneously planting unstable numeric variables as constant expressions into SQL will break the stability of the SQL string, eventually leading to extremely low hit rates of execution plan cache in the database, impacting performance."})]}),"\n",(0,a.jsx)(n.h2,{id:"static-predicates-vs-dynamic-predicates",children:"Static Predicates vs Dynamic Predicates"}),"\n",(0,a.jsxs)(n.p,{children:["Initially, Jimmer supported dynamic queries through ",(0,a.jsx)(n.code,{children:"whereIf"}),":"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public List<Book> findBooks(\n    @Nullable String name,\n    @Nullable Integer edition\n) {\n    BookTable table = BookTable.$;\n    return sqlClient\n        .createQuery(table)\n        .whereIf(\n            name != null && !name.isEmpty(),\n            () -> table().name().ilike(name)\n        )\n        .whereIf(\n            edition != null,\n            table().edition().eq(edition)\n        )\n        .select(table)\n        .execute();\n}\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"fun findBooks(\n    name: String? = null,\n    edition: Int? = null\n): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            name?.takeIf { it.isNotEmpty() }?.let {\n                where(table.name ilike it)\n            }\n            edition?.let {\n                where(table.edition eq it)\n            }\n            select(table)\n        }\n        .execute()\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Although ",(0,a.jsx)(n.code,{children:"whereIf"})," has good readability, the code is relatively cumbersome. Later, Jimmer provided dynamic predicates, which simplified the above code to:"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public List<Book> findBooks(\n    @Nullable String name,\n    @Nullable Integer edition\n) {\n    BookTable table = BookTable.$;\n    return sqlClient\n        .createQuery(table)\n        .where(table.name().ilikeIf(name))\n        .where(table.edition().eqIf(edition))\n        .select(table)\n        .execute();\n}\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"fun findBooks(\n    name: String? = null,\n    edition: Int? = null\n): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            where(table.name `ilike?` name)\n            where(table.name `eq?` edition)\n            select(table)\n        }\n        .execute()\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here, ",(0,a.jsx)(n.code,{children:"ilikeIf"}),", ",(0,a.jsx)(n.code,{children:"eqIf"})," in Java and ",(0,a.jsx)(n.code,{children:"ilike?"}),", ",(0,a.jsx)(n.code,{children:"eq?"})," in Kotlin are called dynamic predicates."]}),"\n",(0,a.jsxs)(n.p,{children:["When the right operand is null or an empty string (string of length 0), the dynamic predicate does not create an expression and directly returns null. The ",(0,a.jsx)(n.code,{children:"where"})," call can automatically ignore null, thereby achieving an equivalent dynamic query."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Compared to the initial ",(0,a.jsx)(n.code,{children:"whereIf"}),", the value of dynamic predicates is not in simplifying the code but in accommodating more complex scenarios, such as ",(0,a.jsx)(n.code,{children:"or"}),":"]})}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public List<Book> findBooksByNameOrPriceRange(\n    @Nullable String name,\n    @Nullable BigDecimal minPrice,\n    @Nullable BigDecimal maxPrice\n) {\n    BookTable table = BookTable.$;\n    return sqlClient\n        .createQuery(table)\n        .where(\n            // highlight-next-line\n            Predicate.or(\n                table.name().eqIf(name),\n                table.price().betweenIf(minPrice, maxPrice)\n            )\n        )\n        .select(table)\n        .execute();\n}\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"fun findBooksByNameOrPriceRange(\n    name: String? = null,\n    minPrice: BigDecimal? = null,\n    maxPrice: BigDecimal? = null\n): List<Book> =\n    sqlClient\n        .createQuery(Book::class) {\n            where(\n                // highlight-next-line\n                or(\n                    table.name `eq?` name,\n                    table.price.`between?`(minPrice, maxPrice)\n                )\n            )\n            select(table)\n        }\n        .execute()\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Here, all the arguments of ",(0,a.jsx)(n.code,{children:"or"})," are dynamic predicates, meaning each argument of ",(0,a.jsx)(n.code,{children:"or"})," can be null, and ",(0,a.jsx)(n.code,{children:"or"})," can also ignore null arguments. Of course, if all arguments are null, then ",(0,a.jsx)(n.code,{children:"or"})," itself will refuse to create any expression and directly return null."]}),"\n",(0,a.jsx)(n.p,{children:"Here are all the static predicates and dynamic predicates in Jimmer:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Static Predicate"}),(0,a.jsx)(n.th,{children:"Dynamic Predicate (Java)"}),(0,a.jsx)(n.th,{children:"Dynamic Predicate (Kotlin)"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"eq"}),(0,a.jsx)(n.td,{children:"eqIf"}),(0,a.jsx)(n.td,{children:"`eq?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"ne"}),(0,a.jsx)(n.td,{children:"neIf"}),(0,a.jsx)(n.td,{children:"`ne?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"lt"}),(0,a.jsx)(n.td,{children:"ltIf"}),(0,a.jsx)(n.td,{children:"`lt?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"le"}),(0,a.jsx)(n.td,{children:"leIf"}),(0,a.jsx)(n.td,{children:"`le?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"gt"}),(0,a.jsx)(n.td,{children:"gtIf"}),(0,a.jsx)(n.td,{children:"`gt?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"ge"}),(0,a.jsx)(n.td,{children:"geIf"}),(0,a.jsx)(n.td,{children:"`ge?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"like"}),(0,a.jsx)(n.td,{children:"likeIf"}),(0,a.jsx)(n.td,{children:"`like?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"ilike"}),(0,a.jsx)(n.td,{children:"ilikeIf"}),(0,a.jsx)(n.td,{children:"`ilike?`"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"between"}),(0,a.jsx)(n.td,{children:"betweenIf"}),(0,a.jsx)(n.td,{children:"`between`"})]})]})]}),"\n",(0,a.jsx)(n.p,{children:"Q: Why does Jimmer provide two sets of predicates instead of just providing dynamic predicates?"}),"\n",(0,a.jsx)(n.p,{children:"A: Because static predicates also handle null specially:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"eq: automatically converted to isNull()"}),"\n",(0,a.jsx)(n.li,{children:"ne: automatically converted to isNotNull()"}),"\n",(0,a.jsxs)(n.li,{children:["Other static predicates:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Java: Treats this as a bug in the user's code, requiring the user to either provide a non-null value or switch to a dynamic predicate."}),"\n",(0,a.jsx)(n.li,{children:"Kotlin: Prevents the user from providing potentially null values at compile-time."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"We have clearly discussed the concept of dynamic predicates. To simplify subsequent discussions, the rest of this content will only demonstrate static predicates."})}),"\n",(0,a.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Equals"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().eq("SQL in Action"));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name eq "SQL in Action")\n'})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Not equals"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().ne("SQL in Action"));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name ne "SQL in Action")\n'})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Greater than"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.price().gt(new BigDecimal(50)));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.price gt BigDecimal(50))\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Greater than or equals"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.price().ge(new BigDecimal(50)));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.price ge BigDecimal(50))\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Less than"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.price().lt(new BigDecimal(50)));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.price lt BigDecimal(50))\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Less than or equals"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.price().le(new BigDecimal(50)));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.price le BigDecimal(50))\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Between"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(\n    book.price().between(\n        new BigDecimal(40),\n        new BigDecimal(50)\n    )\n);\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(\n    table.price.between(\n        BigDecimal(40),\n        BigDecimal(50)\n    )\n)\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Not Between"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(\n    book.price().notBetween(\n        new BigDecimal(40),\n        new BigDecimal(50)  \n    )\n);\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(\n    table.price.notBetween(\n        BigDecimal(40),\n        BigDecimal(50)\n    )\n)\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"fuzzy-matching",children:"Fuzzy Matching"}),"\n",(0,a.jsx)(n.h3,{id:"case-sensitivity",children:"Case Sensitivity"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"like"}),": case sensitive"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().like("Ab"));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name like "Ab")\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL condition is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where tb_1_.NAME like ?\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"%Ab%"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ilike"}),": case insensitive"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().ilike("Ab"));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name ilike "Ab") \n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL condition is:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"ilike"})," is supported by dialect"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where tb_1_.NAME ilike ? \n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Otherwise"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where lower(tb_1_.NAME) like ? \n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"%ab%"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"match-modes",children:"Match Modes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LikeMode.ANYWHERE"})," (default behavior without specifying): appears anywhere"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().like("Ab", LikeMode.ANYWHERE)); \n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name.like("Ab", LikeMode.ANYWHERE))\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"%Ab%"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LikeMode.START"}),": as prefix"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().like("Ab", LikeMode.START));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name.like("Ab", LikeMode.START)) \n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"Ab%"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LikeMode.END"}),": as suffix"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().like("Ab", LikeMode.END));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name.like("Ab", LikeMode.END))\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"%Ab"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"LikeMode.EXACT"}),": exact match"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(book.name().like("Ab", LikeMode.EXACT));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name.like("Ab", LikeMode.EXACT)) \n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["The corresponding JDBC parameter is: ",(0,a.jsx)(n.code,{children:"Ab"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"null-check",children:"Null Check"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.store().isNull());\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.store.isNull())\n"})})})]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(book.store().isNotNull());\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(table.store.isNotNull())\n"})})})]}),"\n",(0,a.jsx)(n.h2,{id:"in-list",children:"IN LIST"}),"\n",(0,a.jsx)(n.h3,{id:"single-column",children:"Single Column"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    book.name().in(\n        Arrays.asList(\n            "SQL in Action",  \n            "Java in Action"\n        )\n    )\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    table.name valueIn listOf(\n        "SQL in Action",\n        "Java in Action" \n    )\n)\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL condition is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where tb_1_.NAME in (?, ?)  \n"})}),"\n",(0,a.jsx)(n.h3,{id:"multiple-columns",children:"Multiple Columns"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    Expression.tuple(\n        book.name(),\n        book.edition()  \n    ).in(\n        Arrays.asList(\n            new Tuple2<>("SQL in Action", 1),\n            new Tuple2<>("SQL in Action", 2),\n            new Tuple2<>("Java in Action", 1), \n            new Tuple2<>("Java in Action", 2)\n        )\n    )\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    tuple(\n        table.name,\n        table.edition\n    ) valueIn listOf(\n        Tuple2("SQL in Action", 1),\n        Tuple2("SQL in Action", 2),\n        Tuple2("Java in Action", 1),\n        Tuple2("Java in Action", 2)\n    )\n)\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL condition is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where (tb_1_.NAME, tb_1_.EDITION) in (\n    (?, ?), (?, ?), (?, ?), (?, ?) \n)\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["Besides used with collections, ",(0,a.jsx)(n.code,{children:"in"})," can also be used with subqueries."]}),(0,a.jsxs)(n.p,{children:["This will be covered in detail in docs about ",(0,a.jsx)(n.a,{href:"../query/sub-query",children:"subqueries"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"and-or-not",children:"AND, OR, NOT"}),"\n",(0,a.jsx)(n.h3,{id:"and",children:"AND"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    Predicate.and(\n        book.name().like("Ab"),\n        book.price().ge(new BigDecimal(40)), \n        book.price().lt(new BigDecimal(60))\n    )\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    and(\n        table.name like "Ab",\n        table.price ge BigDecimal(40),\n        table.price lt BigDecimal(60)\n    )\n) \n'})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Note that when the logical AND expression is directly used as the where parameter, the following equivalent forms are more recommended:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Use varargs version of where method"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    book.name().like("Ab"),\n    book.price().ge(new BigDecimal(40)),\n    book.price().lt(new BigDecimal(60))\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    table.name like "Ab",\n    table.price ge BigDecimal(40), \n    table.price lt BigDecimal(60)\n)\n'})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Call where multiple times"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'q.where(book.name().like("Ab"));\nq.where(book.price().ge(new BigDecimal(40)));\nq.where(book.price().lt(new BigDecimal(60)));\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(table.name like "Ab")\nwhere(table.price ge BigDecimal(40)) \nwhere(table.price lt BigDecimal(60))\n'})})})]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["So directly using ",(0,a.jsx)(n.code,{children:"and"})," would not be common in real projects."]}),"\n",(0,a.jsx)(n.h3,{id:"or",children:"OR"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    // highlight-next-line\n    Predicate.or(\n        book.name().like("Ab"),\n        book.price().ge(new BigDecimal(40)),\n        book.price().le(new BigDecimal(60))\n    )\n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    // highlight-next-line\n    or(\n        table.name like "Ab",\n        table.price ge BigDecimal(40),\n        table.price le BigDecimal(60)\n    )\n)\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"not",children:"NOT"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'where(\n    book.name().like("Ab").not()  \n);\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'where(\n    not(table.name like "Ab")\n);\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["It's not always necessary to call the ",(0,a.jsx)(n.code,{children:"not()"})," function. Often there are shortcuts available, such as:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".eq(value).not()"})," can be simplified to ",(0,a.jsx)(n.code,{children:".ne(value)"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".isNull().not()"})," can be simplified to ",(0,a.jsx)(n.code,{children:".isNotNull(value)"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".exists().not()"})," can be simplified to ",(0,a.jsx)(n.code,{children:".notExists()"})," ",(0,a.jsxs)(n.em,{children:["(exists will be introduced in ",(0,a.jsx)(n.a,{href:"../query/sub-query",children:"subqueries"}),")"]})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Even when developers explicitly use ",(0,a.jsx)(n.code,{children:"not()"}),", the final SQL may not contain ",(0,a.jsx)(n.code,{children:"NOT"}),". For example:"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"where(\n    book.price().ge(new BigDecimal(40)).not()\n);\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"where(\n    not(book.price ge BigDecimal(40)) \n)\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"The actual generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"where tb_1_1.PRICE < ?\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Jimmer-sql tries to avoid directly using ",(0,a.jsx)(n.code,{children:"NOT"})," in SQL, but the final logic is equivalent to what you want."]}),"\n",(0,a.jsx)(n.h2,{id:"math-operations",children:"Math Operations"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"+"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"select(book.price().plus(BigDecimal.TWO));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"select(table.price + BigDecimal.TWO)\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"-"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"select(book.price().minus(BigDecimal.TWO));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"select(table.price - BigDecimal.TWO)\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"*"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"select(book.price().times(BigDecimal.TWO)); \n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"select(table.price * BigDecimal.TWO)\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"/"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"select(book.price().div(BigDecimal.TWO));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"select(table.price / BigDecimal.TWO)\n"})})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"%"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"select(book.price().rem(BigDecimal.TWO));\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"select(table.price % BigDecimal.TWO)\n"})})})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"aggregate-functions",children:"Aggregate Functions"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"BookTable book = Tables.BOOK_TABLE;\n\nList<\n    Tuple6<\n        Long,\n        Long,\n        BigDecimal,\n        BigDecimal,\n        BigDecimal,\n        BigDecimal  \n    >\n> tuples = sqlClient\n    .createQuery(book)\n    .select(\n        book.count(),\n        book.id().count(/* disintct */ true),\n        book.price().sum(),\n        book.price().min(),\n        book.price().max(),\n        book.price().avg()\n    )\n    .execute();\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"val tuples = sqlClient\n    .createQuery(Book::class) {\n        select(\n            count(table),\n            count(table.id, distinct = true),\n            sum(table.price),\n            min(table.price),\n            max(table.price),\n            avg(table.price)\n        );\n    }\n    .execute()\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"The final generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    count(tb_1_.ID),\n    count(distinct tb_1_.ID),\n    sum(tb_1_.PRICE),\n    min(tb_1_.PRICE),\n    max(tb_1_.PRICE),\n    avg(tb_1_.PRICE)\nfrom BOOK as tb_1_ \n"})}),"\n",(0,a.jsx)(n.h2,{id:"coalesce",children:"Coalesce"}),"\n",(0,a.jsx)(n.p,{children:"The Coalesce statement specifies a list of expressions and returns the first non-null value."}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'BookStoreTable store = Tables.BOOK_STORE_TABLE;\n\nList<String> results = sqlClient\n    .createQuery(store) \n    .select(\n        store.website() \u2776\n            // highlight-next-line\n            .coalesceBuilder()\n            .or(store.name()) \u2777\n            .or("Default Value") \u2778\n            .build()\n    )\n    .execute();\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"var results = sqlClient\n    .createQuery(BookStore::class) {\n        select(\n            table.website\n                // highlight-next-line\n                .coalesce() \u2776\n                .or(table.name) \u2777\n                .end()\n        )\n    }\n"})})})]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"In this example, the Kotlin code is different from the Java code. In Kotlin there is no expression \u2778."}),(0,a.jsxs)(n.p,{children:["The Kotlin API introduces null-safety for SQL, ",(0,a.jsx)(n.code,{children:"table.name"})," is a non-null field, so Kotlin forces us to write ",(0,a.jsx)(n.code,{children:"end()"})," to complete the expression."]}),(0,a.jsx)(n.p,{children:"This means the expression \u2778 in Java code will not be used."})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"SQL for Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    coalesce(\n        tb_1_.WEBSITE,\n        tb_1_.NAME,\n        ?  \n    )\nfrom BOOK_STORE as tb_1_ \n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"SQL for Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    coalesce(\n        tb_1_.WEBSITE,\n        tb_1_.NAME \n    )\nfrom BOOK_STORE as tb_1_\n"})})})]}),"\n",(0,a.jsxs)(n.p,{children:["Specifically, if the SQL coalesce function has only two parameters, i.e. ",(0,a.jsx)(n.code,{children:"or()"})," is called only once in the Java code above, there is a shortcut:"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"BookStoreTable store = Tables.BOOK_STORE_TABLE;\n\nList<String> results = sqlClient\n    .createQuery(store)\n    .select(\n        // highlight-next-line\n        store.website().coalesce(store.name()) \n    )\n    .execute();\n"})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"var results = sqlClient\n    .createQuery(BookStore::class) {\n        select(\n            // highlight-next-line\n            table.website.coalesce(table.name)\n        )\n    }\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    coalesce(tb_1_.WEBSITE, tb_1_.NAME)\nfrom BOOK_STORE as tb_1_ \n"})}),"\n",(0,a.jsx)(n.p,{children:"This form is actually the most common."}),"\n",(0,a.jsx)(n.h2,{id:"concat",children:"Concat"}),"\n",(0,a.jsx)(n.p,{children:"The Contact expression concatenates strings."}),"\n",(0,a.jsxs)(n.p,{children:["This example concatenates ",(0,a.jsx)(n.code,{children:"firstName"})," and ",(0,a.jsx)(n.code,{children:"lastName"})," of authors with a space as separator:"]}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'AuthorTable author = Tables.AUTHOR_TABLE;  \n\nList<String> results = sqlClient\n    .createQuery(author)\n    .select(\n        author\n            .firstName()\n            // highlight-next-line\n            .concat(\n                Expression.string().value(" "), \n                author.lastName()\n            )\n    )\n    .execute();\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'var fullNames = sqlClient\n    .createQuery(Author::class) {\n        select(\n            // highlight-next-line\n            concat(\n                table.firstName,\n                value(" "),\n                table.lastName\n            )\n        )\n    }\n    .execute()\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    concat(\n        tb_1_.FIRST_NAME,\n        ?,\n        tb_1_.LAST_NAME  \n    )\nfrom AUTHOR as tb_1_\n"})}),"\n",(0,a.jsx)(n.h2,{id:"case",children:"Case"}),"\n",(0,a.jsx)(n.p,{children:"There are two types of case expressions, simple case and searched case."}),"\n",(0,a.jsx)(n.h3,{id:"simple-case",children:"Simple Case"}),"\n",(0,a.jsx)(n.p,{children:"For simple case, an expression is specified at the beginning. Each WHEN branch specifies an expected value to check if the expression matches that value."}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<String> results = sqlClient\n    .createQuery(book)\n    .select(\n        Expression.string()\n            // highlight-next-line\n            .caseBuilder(book.name())\n            .when("Java in Action", "Matched")\n            .when("SQL in Action", "Matched")\n            .otherwise("Not matched")\n    )\n    .execute();\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'val results = sqlClient\n    .createQuery(Book::class) {\n        select(\n            // highlight-next-line\n            case(table.name)\n                .match("Kotlin in Action", "Matched")\n                .match("SQL in Action", "Matched")\n                .otherwise("Not matched")\n        )\n    }\n    .execute()\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    case tb_1_.NAME\n        when ? then ?\n        when ? then ?\n        else ?\n    end\nfrom BOOK as tb_1_ \n"})}),"\n",(0,a.jsx)(n.h3,{id:"searched-case",children:"Searched Case"}),"\n",(0,a.jsx)(n.p,{children:"For searched case, no expression is specified at the beginning. Each WHEN branch can specify an arbitrary complex conditional expression to check if any branch logic evaluates to true."}),"\n",(0,a.jsxs)(s.A,{groupId:"language",children:[(0,a.jsx)(r.A,{value:"java",label:"Java",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'BookTable book = Tables.BOOK_TABLE;\n\nList<String> results = sqlClient\n    .createQuery(book)\n    .select(\n        Expression.string()\n            // highlight-next-line \n            .caseBuilder()\n            .when(\n                book.price().lt(new BigDecimal(30)), \n                "Cheap"\n            )\n            .when(\n                book.price().gt(new BigDecimal(70)),\n                "Expensive"  \n            )\n            .otherwise("Appropriate")\n    )\n    .execute();\n'})})}),(0,a.jsx)(r.A,{value:"kotlin",label:"Kotlin",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:'val results = sqlClient\n    .createQuery(Book::class) {\n        select(\n            // highlight-next-line\n            case()\n                .match(table.price lt BigDecimal(30), "Cheap")\n                .match(table.price gt BigDecimal(70), "Expensive")\n                .otherwise("Appropriate")\n        )\n    }\n    .execute() \n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"The generated SQL is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"select\n    /* highlight-next-line */\n    case\n        when tb_1_.PRICE < ? then ?\n        when tb_1_.PRICE > ? then ?\n        else ?\n    end\nfrom BOOK as tb_1_\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},19365:(e,n,l)=>{l.d(n,{A:()=>r});l(96540);var a=l(18215);const i={tabItem:"tabItem_Ymn6"};var s=l(74848);function r(e){let{children:n,hidden:l,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,r),hidden:l,children:n})}},11470:(e,n,l)=>{l.d(n,{A:()=>f});var a=l(96540),i=l(18215),s=l(23104),r=l(56347),c=l(205),t=l(57485),o=l(31682),d=l(89466);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:l}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:l,attributes:a,default:i}}=e;return{value:n,label:l,attributes:a,default:i}}))}(l);return function(e){const n=(0,o.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,l])}function x(e){let{value:n,tabValues:l}=e;return l.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:l}=e;const i=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:l}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!l)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return l??null}({queryString:n,groupId:l});return[(0,t.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function p(e){const{defaultValue:n,queryString:l=!1,groupId:i}=e,s=u(e),[r,t]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:l}=e;if(0===l.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!x({value:n,tabValues:l}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${l.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=l.find((e=>e.default))??l[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[o,h]=j({queryString:l,groupId:i}),[p,g]=function(e){let{groupId:n}=e;const l=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,d.Dv)(l);return[i,(0,a.useCallback)((e=>{l&&s.set(e)}),[l,s])]}({groupId:i}),m=(()=>{const e=o??p;return x({value:e,tabValues:s})?e:null})();(0,c.A)((()=>{m&&t(m)}),[m]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!x({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);t(e),h(e),g(e)}),[h,g,s]),tabValues:s}}var g=l(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=l(74848);function v(e){let{className:n,block:l,selectedValue:a,selectValue:r,tabValues:c}=e;const t=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),d=e=>{const n=e.currentTarget,l=t.indexOf(n),i=c[l].value;i!==a&&(o(n),r(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const l=t.indexOf(e.currentTarget)+1;n=t[l]??t[0];break}case"ArrowLeft":{const l=t.indexOf(e.currentTarget)-1;n=t[l]??t[t.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":l},n),children:c.map((e=>{let{value:n,label:l,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>t.push(e),onKeyDown:h,onClick:d,...s,className:(0,i.A)("tabs__item",m.tabItem,s?.className,{"tabs__item--active":a===n}),children:l??n},n)}))})}function k(e){let{lazy:n,children:l,selectedValue:i}=e;const s=(Array.isArray(l)?l:[l]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function A(e){const n=p(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",m.tabList),children:[(0,b.jsx)(v,{...e,...n}),(0,b.jsx)(k,{...e,...n})]})}function f(e){const n=(0,g.A)();return(0,b.jsx)(A,{...e,children:h(e.children)},String(n))}},28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>c});var a=l(96540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);